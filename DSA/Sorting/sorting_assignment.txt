Problem  - 1

// Approach 1 - best Team with No conflict

class Solution {
    int recur(vector<pair<int,int>>&v,int i,int mx)
    {
        if(i >= v.size())
        {
            return 0;
        }
        if(v[i].second >= mx)
        {
            int notTake = recur(v,i+1,mx);
            int take = recur(v,i+1,v[i].second) + v[i].first;
            return max(notTake,take);
        }
        else 
            return recur(v,i+1,mx);
    }
public:
    int bestTeamScore(vector<int>& scores, vector<int>& ages) {
        vector<pair<int,int>>v;
        int totalScore = 0;
        int size1 = scores.size();
        
        for(int i = 0;i < size1;i++)
        {
            v.push_back({scores[i],ages[i]});
        }
        sort(v.begin(),v.end());

        return recur(v,0,0);
    }
};

Approach 2 - Memorization

int memo(vector<pair<int,int>>&v,int i,int mx,vector<vector<int>>&dp)
    {
        if(i >= v.size())
        {
            return 0;
        }
        if(dp[i][mx] != -1)
        {
            return dp[i][mx];
        }
        if(v[i].second >= mx)
        {
            int notTake = memo(v,i+1,mx,dp);
            int take = memo(v,i+1,v[i].second,dp) + v[i].first;
            return  dp[i][mx] = max(notTake,take);
        }
        else 
            return memo(v,i+1,mx,dp);
    }
public:
    int bestTeamScore(vector<int>& scores, vector<int>& ages) {
        vector<pair<int,int>>v;
        int totalScore = 0;
        int size1 = scores.size();
        vector<vector<int>>dp(size1,vector<int>(1010,-1));
        for(int i = 0;i < size1;i++)
        {
            v.push_back({scores[i],ages[i]});
        }
        sort(v.begin(),v.end());

        return memo(v,0,0,dp);
    }
};

Problem 2 - Majority Element- II


class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        // T.C - O(N^2) - TLE
        // S.C - O(1)
        // create variable  count initialize to 1 and 
        // crete vector for majority Element equal
        // run the loop i to n and j is run from i + 1 to n
        // check current ith element is equal to jth element if it is increment the count
        // after the job loop end then check whether the count of ith elemtn is greater than n/3 if it is then 
        // store the ith current element in vector ans because it may me more than one majority element is present in array.
        vector<int>majorityElement;
        int n = nums.size();
        int count = 0;
        for(int i =0;i<n;i++)
        {
            
            if(majorityElement.size() == 0 || majorityElement[0] != nums[i]){
                count  = 0;
            for(int j = 0;j < n;j++)
            {
                if(nums[i] == nums[j])
                    count++;
            }
            }
            if(count > n/3)
            {
                majorityElement.push_back(nums[i]);
            }
        }
        
        /*
        approach 2 - 
        Intuition = we can count the freq of each element store into the some data structures and check which 
        which element is frequency greater than N/3 and return it
        
        // we can think of frequency array or hashmap
        push all the element of input array to map
        and check which key has value greater than N/2 and return it.
        */
//         T.C - O(Nlogn) + O(N) -> o(NlogN) for pushing the element into hashmap, another O(N) for checking which element has more than N/2 occurrences
//         S.C - O(N)
         int N= nums.size();
        vector<int>majorityElement;
unordered_map<int,int>mp;
        for(int i = 0;i<N;i++)
        {
            mp[nums[i]]++;
        }
        for(auto i : mp)
        {
            if(i.second > N/3)
                majorityElement.push_back(i.first);
        }
        
        return majorityElement;
        
    }
};


Problem - 3 - Merge Overlapping Intervals.

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        // sort intervals
        sort(intervals.begin(),intervals.end());
        int n = intervals.size();
        vector<vector<int>>mergeIntervals;
        // store the first intervals in temp;
        vector<int>tempIntervals = intervals[0];

        for(int i = 1;i< n;i++)
        {
            // Compare the end time of previous intervals with the starting time of next Intervals
            //  if start time of next intervals is smaller than end time of previous intervals then they are overlapped
            // we take maximum from end time of both next and previous intervals
            if(tempIntervals[1] >= intervals[i][0]){
                tempIntervals[1] = max(tempIntervals[1],intervals[i][1]);
            }
            else {
                // if they are non-overlapped we store out current interval into our ans array
                mergeIntervals.push_back(tempIntervals);
                // update temp Intervals with current intervals.
                tempIntervals = intervals[i];
            }
        }
        // at last when the loops end we have our last interval of input array. 
        // we add that intervals into ans array. 
        mergeIntervals.push_back(tempIntervals);
        
        return mergeIntervals;

    }
};

Problem - 4 - Sort colors

void sortColors(vector<int>& nums) {
        // Approach -1 , Using Sort Function
        // sort(nums.begin(),nums.end());
        
        // Approach 2 - Using Couting Method
        // T.C - O(N),
        // S.C - O(1)
        
        // Iterate over the array, take three variable count0 to count no. of 0's
        // count1 to count no. of 1's
        // count2 to count no. of 2's
        
        // iterate again over the array and push the 0 into the array until count0 
        // same as for 1 and 2
        
        int count0 = 0,count1 = 0,count2 = 0;
        int n = nums.size();
        int i;
        for(i = 0;i<n;i++)
        {
            if(nums[i] == 0)
                count0++;
            if(nums[i] == 1)
                count1++;
            if(nums[i] == 2)
                count2++;
        }
        i = 0;
        while(count0--){
            nums[i++] = 0;
        }
        while(count1--){
            nums[i++] = 1;
        }
        while(count2--){
            nums[i++] = 2;
        }

        Approach 3 - Dutch national Flag Algorithm

        int low = 0;
        int mid = 0;
        int high = nums.size() - 1;
        
        while(mid <= high)
        {
            if(nums[mid] == 0)
            {
                swap(nums[mid],nums[low]);
                low++;
                mid++;
            }
            else if(nums[mid] == 1)
            {
                mid++;
            }
            else
            {
                swap(nums[high],nums[mid]);
                high--;
            }
        }       
}

Problem - 5 - Intersection Of Two Arrays

class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        
        // Approach 1 - Two pointer + Sorting
        // T.C - O(NlogN + MlogM)
        // S.C - O(N) - Using Set in Avg Case
        int n = nums1.size(); // size of nums1 array
        int m = nums2.size(); // size of nums2 array
        
        sort(nums1.begin(),nums1.end());
        sort(nums2.begin(),nums2.end());
        int i = 0,j = 0;
        unordered_set<int>s;
        vector<int>intersectionNum;
        while(i < n && j < m){
            if(nums1[i] < nums2[j]){
                i++;
            }       
            else if(nums1[i] > nums2[j]){
                j++;
            }
            else{
                // set store only unique element
                s.insert(nums1[i]);
                i++;
                j++;
            }
        }
        
        for(auto it : s){
            intersectionNum.push_back(it);
        }
        return intersectionNum;
        
        Approach 2 - Using Hashing
        T.C - O(M+N)
        S.C - O(N) Searching in 
        The time complexity of this method is O(m+n) under the assumption that hash table search and insert          operations take O(1) time
        unordered_set<int>s;
        for(int i = 0;i<n;i++)
        {
            s.insert(nums1[i]);
        }
        vector<int>ans;
        // search num2 array element present in num1array or not
        
        for(int i = 0;i<m;i++)
        {
            if(s.find(nums2[i]) != s.end()){
                ans.push_back(nums2[i]);
                s.erase(nums2[i]);
            }
        }
        return ans;
        
        Approach - 3 Using Auxillary Array
        T.C - O(M+N)
        S.C - O(1)
        vector<int>aux(1001,0);
        vector<int>ans;
        for(int i = 0;i<n;i++)
        {
            aux[nums1[i]]++;
        }
        
        for(int i = 0;i<m;i++)
        {
            if(aux[nums2[i]] != 0){
                ans.push_back(nums2[i]);
                aux[nums2[i]] = 0;
            }
        }
        
        return ans;
    }
    
    
};