Problem - 1 - Vertical Order Traversal

class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        map < int, map < int, multiset < int >>> nodes;
  queue < pair < TreeNode * , pair < int, int >>> todo;
  todo.push({
    root,
    {
      0,
      0
    }
  }); //initial vertical and level
  while (!todo.empty()) {
    auto p = todo.front();
    todo.pop();
    TreeNode * temp = p.first;

    //x -> vertical , y->level
    int x = p.second.first, y = p.second.second;
    nodes[x][y].insert(temp -> val); //inserting to multiset

    if (temp -> left) {
      todo.push({
        temp -> left,
        {
          x - 1,
          y + 1
        }
      });
    }
    if (temp -> right) {
      todo.push({
        temp -> right,
        {
          x + 1,
          y + 1
        }
      });
    }
  }
  vector < vector < int >> ans;
  for (auto p: nodes) {
    vector < int > col;
    for (auto q: p.second) {
      col.insert(col.end(), q.second.begin(), q.second.end());
    }
    ans.push_back(col);
  }
  return ans;
    }
};
 
 Problem - 2 - Zig Zag Traversal

 class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
         if(root == NULL)
            return {};
        vector<vector<int>>ans;
        
        queue<TreeNode*> q;
        q.push(root);
        // bool leftToRight = false;
        bool leftToRight = true;
        while(!q.empty())
        {
            int size = q.size();
            vector<int>level;
            
            for(int i = 0;i<size;i++)
            {
                TreeNode* node = q.front();
                q.pop();
            
            // find the position to fill the node value
            level.push_back(node->val);
            if(node->left != NULL)
                q.push(node->left);
            if(node->right != NULL)
                q.push(node->right);
            
            }
            if(!leftToRight){
                reverse(level.begin(),level.end());
            }
            ans.push_back(level);
            level.clear();
            leftToRight = !leftToRight;
            
        }
        return ans;
    }
};

Problem - 3 - Top View

#include <bits/stdc++.h>
vector<int> getTopView(TreeNode<int> *root)
{
    // Write your code here.
    if(root == NULL)
        return {};
    queue<pair<int,TreeNode<int>*>>q;
    q.push({0,root});
    map<int,int>mp;
    vector<int>topView;
    while(!q.empty())
    {
        auto it = q.front();
        q.pop();
        TreeNode<int>* node = it.second;
        int line = it.first;
        if(mp.find(line) == mp.end())
            mp[line] = node->data;
        
        if(node->left != NULL)
            q.push({line-1,node->left});
        if(node->right != NULL)
            q.push({line+1,node->right});
        
    }

    for(auto it : mp)
        topView.push_back(it.second);
    
    return topView;
}

Problem - 4 Symmetric Tree

class Solution {
    bool isSym(TreeNode*p, TreeNode* q)
    {
        if(p == NULL || q == NULL)
            return p == q;
        
        if(p->val != q->val)
            return false;

        return isSym(p->left,q->right) && isSym(p->right,q->left);
        
    }
public:
    bool isSymmetric(TreeNode* root) {
        return root == NULL || isSym(root->left,root->right);
    }
};

Problem - 5 - Sum to Root leaf Number

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    void solve(TreeNode* root,vector<string>&ans,string str)
    {
        if(root == NULL)
            return;
        str = str + to_string(root->val);
        
        if(root->left == NULL && root->right == NULL){ // we reached at leaf node
            ans.push_back(str);
        }
        
        else {
            solve(root->left,ans,str); // left call
            solve(root->right,ans,str); // right call
        }
    }
    int sumNumbers(TreeNode* root) {
        // int sum = 0;
        vector<string>ans;
        string str = "";
        solve(root,ans,str);
        long long sum = 0;
        for(auto it : ans){
            sum += stoi(it);
        }
        return sum;
    }
};

Problem - 6 - Sum to left Leaves

class Solution {
public:
    void solve(TreeNode* root,int &sum,int i)
    {
        if(root == NULL)
            return;
        
        
        if(root->left == NULL && root->right == NULL) // to check the leaf node
            sum += root->val * i;  
            // if we are at left leaf node then we sum the value of leaf node 
            // but when we are at right lead node then the node->value is equal to zero
        solve(root->left,sum,1); // for left subtree node value of i is 1 
        
        solve(root->right,sum,0); // for right subtree node value of i is 0
    }
    int sumOfLeftLeaves(TreeNode* root) {
        int sum = 0;
        solve(root,sum,0);
        return sum;
    }
};

Problem - 7 - Subtree Of Another Tree

class Solution {

    bool isIdenticalHelp(TreeNode* root,TreeNode* subRoot)
    {
        // base case
        if(root == NULL && subRoot == NULL) // base case
            return true;

        if(root == NULL || subRoot == NULL) // if root or subroot is null then false
            return false;
        // check if the data of both root are same and also check for both the left and right subtree is same or not
        return (root->val == subRoot->val && isIdenticalHelp(root->left,subRoot->left) && isIdenticalHelp(root->right,subRoot->right));
    }

public:
    bool isSubtree(TreeNode* root, TreeNode* subRoot) {
        if(root == NULL)
            return false;
        if(subRoot == NULL)
            return true;
        // check the subroot is identical in/ or present in root or not
        if (isIdenticalHelp(root,subRoot))
            return true;

        return isSubtree(root->left,subRoot) || isSubtree(root->right,subRoot);
    }
};

Problem - 8 - Smallest String from leaf

class Solution {
public:
    
    void solve(TreeNode* root,vector<string>&ans,string s){
        if(root == NULL)
            return;
        s = s + char(root->val + 'a');
        
        if(root->left == NULL && root->right == NULL){
            reverse(s.begin(),s.end());
            ans.push_back(s);
        }
        else {
            solve(root->left,ans,s);
            solve(root->right,ans,s);
        }
    }
    string smallestFromLeaf(TreeNode* root) {
        vector<string>ans;
        string s = "";
        solve(root,ans,s);
        sort(ans.begin(),ans.end());
        return ans[0];
    }
};

problem - 9 -Right View

vector<int> getRightView(TreeNode<int> *root) {
  //    Write your code here
    if (root == NULL)
        return {};
    vector<int>RightView;
    queue<TreeNode<int>*>q;
    q.push(root);
    while(!q.empty())
    {
        int size = q.size();
        for(int i = 1;i<=size;i++)
        {
            TreeNode<int>* node = q.front();
            q.pop();
            if(i == size)
                leftView.push_back(node->data);
            s
            if(node->left != NULL)
                q.push(node->left);
            if(node->right != NULL)
                q.push(node->right);
        }

    }
    return RightView;
}

problem - 10 - Reverse odd level of Tree

class Solution {
public:


    TreeNode* reverseOddLevels(TreeNode* root) {
        if(root == NULL)
            return NULL;
        queue<TreeNode*>q;
        q.push(root);
        int level = 0;
        while(!q.empty())
        {
           
            int size = q.size();
            // nodes will hold all the nodes of current level
            vector<TreeNode*>nodes;
            // nums will hold their values;
             vector<int>nums;
            
            for(int i = 0; i < size;i++)
            {
                TreeNode* curr = q.front();
                q.pop();
                nums.push_back(curr->val);
                nodes.push_back(curr);
                if(curr->left != NULL)
                    q.push(curr->left);
                if(curr->right != NULL)
                    q.push(curr->right);
            }
            //If the level is odd, I will reverse the values and assign them to the TreeNodes using a for loop. 
            if(level % 2 != 0)
            {
                reverse(nums.begin(),nums.end());
                for(int i = 0;i < nums.size();i++)
                {
                    TreeNode* curr = nodes[i];
                    curr->val = nums[i];
                }
            }
            // increase the level;
            level++;
        }
        return root;

         
        
    }
};

Problem - 11 - Pre order Traversal

class Solution {
    void preOrder(TreeNode* root,vector<int>&ans){
        if(root == NULL)
            return;
        
        
        ans.push_back(root->val);
        preOrder(root->left,ans);
        preOrder(root->right,ans);
    }
public:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int>ans;
        preOrder(root,ans);
        return ans;
    }
};

Problem - 12 - Post order Traversal
class Solution {
    void postOrder(TreeNode* root,vector<int>&ans){
        if(root == NULL)
            return;
        
        
        
        postOrder(root->left,ans);
        postOrder(root->right,ans);
        ans.push_back(root->val);
    }
public:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int>ans;
        postOrder(root,ans);
        return ans;
    }
};

Problem - 13 - Populating next right pointer

class Solution {
public:
    Node* connect(Node* root) {
        if(root == NULL)
            return root;
        queue<Node*>q;
        q.push(root);
        while(!q.empty())
        {
            Node* rightNode = NULL;
            int size = q.size();
            for(int i = size - 1;i >= 0;i--)
            {
                auto curr = q.front();
                q.pop();
                curr->next = rightNode;
                rightNode = curr;
                if(curr->right){
                    q.push(curr->right);
                }
                if(curr->left){
                    q.push(curr->left);
                }
            }
            
        }
        return root;

    }
};

Problem - 14 - Populating Next pointer

class Solution {
public:
    Node* connect(Node* root) {
        if(root == NULL)
            return root;
        queue<Node*>q;
        q.push(root);
        while(!q.empty())
        {
            Node* rightNode = NULL;
            int size = q.size();
            for(int i = size - 1;i >= 0;i--)
            {
                auto curr = q.front();
                q.pop();
                curr->next = rightNode;
                rightNode = curr;
                if(curr->right){
                    q.push(curr->right);
                    q.push(curr->left);
                }
            }
        }
        return root;
    }
};

Problem - 15 - Path Sum from root to leaf

class Solution {
public:
    bool solve(TreeNode*root,int targetSum)
    {
        if(root == NULL)
            return false;
        targetSum = targetSum - root->val;
        if(root->left == NULL && root->right == NULL && targetSum == 0)
            return true;
        if(root->left == NULL && root->right == NULL)
                return false;
        return solve(root->left,targetSum) || solve(root->right,targetSum);
    }
    bool hasPathSum(TreeNode* root, int targetSum) {
        return solve(root,targetSum);
    }
};

Problem - 16 - Path Sum - 2

class Solution {
public:
    
    void solve(TreeNode*root,int targetSum,int sum_so_far,vector<vector<int>>&ans, vector<int>path)
    {
        if(root == NULL)
            return;
        sum_so_far = sum_so_far + root->val;
        path.push_back(root->val);
        
        if(root->left == NULL && root->right == NULL){  // we reached at leaf node
            if(targetSum == sum_so_far)
                ans.push_back(path);
        }
      else {  
            solve(root->left,targetSum,sum_so_far,ans,path);
            solve(root->right,targetSum,sum_so_far,ans,path);
        }
        
    }
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        vector<vector<int>>ans;
        vector<int>path;
        solve(root,targetSum,0,ans,path);
        return ans;
    }
};

Problem - 17 - Path Sum - 3

class Solution {
public:
    
    void solve(TreeNode* root,int targetSum,int &count,vector<int>&path)
    {
        if(root == NULL)
            return;
        path.push_back(root->val);
        // left call
        solve(root->left,targetSum,count,path);
        // right call
        solve(root->right,targetSum,count,path);
        
        // check for k sum
        long sum = 0,size = path.size();
        for(int i = size - 1;i >= 0;i--)
        {
            sum += path[i];
            if(targetSum == sum)
                count++;
        }
        // pop the last node value from path vector
        path.pop_back();
        
    }
    
    int pathSum(TreeNode* root, int targetSum) {
        vector<int>path;
        int count = 0;
        solve(root,targetSum,count,path);
        return count;
    }
};

Problem - 18 - Min Depth Binary Tree

class Solution {
public:
    int minDepth(TreeNode* root) {
        if(root == NULL)
            return 0;
        
        int lh = minDepth(root->left);
        int rh = minDepth(root->right);
        
        if(lh == 0 || rh == 0)
            return 1 + max(lh,rh);
        
        return 1 + min(lh,rh);
    }
};

Problem - 19 - Maximum width of binary tree

class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        if(root == NULL)
            return 0;
        
        long long res = 1;
        queue<pair<TreeNode*, long long>> q;
        
        // I am using intialising list
        q.push({root, 0});      // also can use make_pair
        
        while(!q.empty())
        {
            long long cnt = q.size();
            // start is the index of root node for first level
            long long start = q.front().second;
            long long end = q.back().second;
            
            res = max(res,end-start + 1);
            
            for(int i = 0; i <cnt; ++i)
            {
                TreeNode* node = q.front();
                // we will use it while inserting it children
                // left child will be 2 * idx + 1;
                // right child will be 2 * idx + 2;
                long long idx = p.second - start;
                
                q.pop();
                
                // if  left child exist
                if(node->left != NULL)
                    q.push({node->left, (long long)2 * idx + 1});
                
                // if right child exist
                if(node->right != NULL)
                    q.push({node->right, (long long) 2 * idx + 2});
            }
        }
        
        return res;
    }
};

Problem - 20 - Longest univalue

class Solution {
public:
    int height(TreeNode* root, int &dis)
    {
        if(root == NULL)
            return 0 ;
        int l = height(root->left,dis);
        int r = height(root->right,dis);
        int dl = (root->left && root->val == root->left->val) ? l + 1 : 0;
        int dr = (root->right && root->val == root->right->val) ? r + 1 : 0;
        dis = max(dis,dl + dr);
        return max(dl,dr);
    }
    int longestUnivaluePath(TreeNode* root) {
        int dis = 0;
        height(root,dis);
        return dis;
    }
};

Problem -21 - Level ORDER Traversal

vector<int> zigzagTreeTraversal(TreeNode<int> *root)
{
    //    Write your code here.
        vector<int>ans,temp;

    if(root == NULL)
        return ans;
    queue<TreeNode<int>*>q;
    q.push(root);
    bool flag = true;
    while(!q.empty())
    {
        int size = q.size();
        for(int i = 0;i<size;i++)
        {
            TreeNode<int>* node = q.front();
            q.pop();

            if (node->left != NULL)
              q.push(node->left);
            if (node->right != NULL) 
              q.push(node->right);
            temp.push_back(node->data);
        }
        if(!flag)
            reverse(temp.begin(),temp.end());
        for (auto it : temp) {
            ans.push_back(it);
        }
        temp.clear();
        flag = !flag;
    }

        return ans;
    }

}

Problem - 22 - Level Order Traversal

vector<int> getLeftView(TreeNode<int> *root) {
  //    Write your code here
    if (root == NULL)
        return {};
    vector<int>leftView;
    queue<TreeNode<int>*>q;
    q.push(root);
    while(!q.empty())
    {
        int size = q.size();
        for(int i = 1;i<=size;i++)
        {
            TreeNode<int>* node = q.front();
            q.pop();
            if(i == 1)
                leftView.push_back(node->data);
            
            if(node->left != NULL)
                q.push(node->left);
            if(node->right != NULL)
                q.push(node->right);
        }

    }
    return leftView;
}

problem - 23 - Inorder Traversal

class Solution {
    void inOrder(TreeNode* root,vector<int>&ans){
        if(root == NULL)
            return;
        
        inOrder(root->left,ans);
        ans.push_back(root->val);
        inOrder(root->right,ans);
    }
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int>ans;
        inOrder(root,ans);
        return ans;
    }
};

Problem - 24 - height Of Binary Tree

class Solution {
public:
    int maxDepth(TreeNode* root) {
        // using recursion
        // if(root == NULL)
        //     return 0;
        
        // int lh = maxDepth(root->left);
        // int rh = maxDepth(root->right);
        
        // return 1 + max(lh,rh);
        
        // using level order
        if(root == NULL)
            return 0;
        queue<TreeNode*>q;
        q.push(root);
        int level = 0;
        while(!q.empty())
        {
            //  level = 0;

            int size = q.size();
            while(size--){
                TreeNode* curr = q.front();
                q.pop();

                if(curr->left != NULL){
                    q.push(curr->left);
                }
                if(curr->right != NULL){
                    q.push(curr->right);
                }

            }
            level++;
        }
        return level;
    }
};

Problem - 25  - Diameter of Binary Tree

class Solution {
    
    int height(TreeNode* root, int &diameter)
    {
        if(root == NULL)
            return 0;
        int lh = height(root->left,diameter);
        int rh = height(root->right,diameter);
        
        diameter = max(diameter,lh + rh);
        
        return 1 + max(lh,rh);
    }
public:
    int diameterOfBinaryTree(TreeNode* root) {
        int diameter = 0;
        height(root,diameter);
        return diameter;
    }
};

Problem - 26 - Boundary Traversal of Binary Tree

bool isLeafNode(Node* root)
    {
        if(root->left == NULL && root->right == NULL)
            return true;
        return false;
    }
    
    void addLeftBoundary(Node* root, vector<int>&ans)
    {
        Node* curr = root->left;
        stack<int>s;
        while(curr)
        {
            if(!isLeafNode(curr))
                ans.push_back(curr->data);
            if(curr->left)
                curr = curr->left;
            else
                curr = curr->right;
        }
       
    }
    
    void addRightBoundary(Node* root, vector<int>&ans)
    {
        Node* curr = root->right;
        stack<int>s;
        while(curr)
        {
            if(!isLeafNode(curr))
                s.push(curr->data);
            if(curr->right)
                curr = curr->right;
            else
                curr = curr->left;
        }
        while(!s.empty()){
            ans.push_back(s.top());
            s.pop();
        }
    }
    void addLeaves(Node* root,vector<int>&ans)
    {
        if(isLeafNode(root)){
            ans.push_back(root->data);
            return;
        }
        if(root->left)
            addLeaves(root->left,ans);
        if(root->right)
            addLeaves(root->right,ans);
    }
public:
    vector <int> boundary(Node *root)
    {
        //Your code here
        vector<int>ans;
        
        if(root == NULL)
            return ans;
        
        if(!isLeafNode(root))
            ans.push_back(root->data);
        addLeftBoundary(root,ans);
        addLeaves(root,ans);
        addRightBoundary(root,ans);
        
        return ans;
        
    }
};

problem - 27 - Bottom View of Binary Tree

#include <bits/stdc++.h>
vector<int> getTopView(TreeNode<int> *root)
{
    // Write your code here.
    if(root == NULL)
        return {};
    queue<pair<int,TreeNode<int>*>>q;
    q.push({0,root});
    map<int,int>mp;
    vector<int>topView;
    while(!q.empty())
    {
        auto it = q.front();
        q.pop();
        TreeNode<int>* node = it.second;
        int line = it.first;
        mp[line] = node->data;
        
        if(node->left != NULL)
            q.push({line-1,node->left});
        if(node->right != NULL)
            q.push({line+1,node->right});
        
    }

    for(auto it : mp)
        topView.push_back(it.second);
    
    return topView;
}

Problem - 28 - Average level Of Binary Tree

class Solution {
public:
    vector<double> averageOfLevels(TreeNode* root) {
        if(root == NULL)
            return {};
        
        vector<double>ans;
        queue<TreeNode*>q;
        q.push(root);
        double sum = 0;
        while(!q.empty())
        {
            vector<double>level;
            int size = q.size();
            for(int i = 0;i<size;i++)
            {
                TreeNode* node = q.front();
                q.pop();
                
                double nodeValue = node->val;
                level.push_back(nodeValue);
                if(node->left != NULL)
                    q.push(node->left);
                if(node->right != NULL)
                    q.push(node->right);
            }
            
            for(auto it : level){
                sum += it;
            }
            ans.push_back(sum / level.size());
            level.clear();
            sum = 0;   
        }
        return ans;
    }
};

Problem - 29 - Height of Binary Tree

class Solution {
public:
    int maxDepth(TreeNode* root) {
        // using recursion
        // if(root == NULL)
        //     return 0;
        
        // int lh = maxDepth(root->left);
        // int rh = maxDepth(root->right);
        
        // return 1 + max(lh,rh);
        
        // using level order
        if(root == NULL)
            return 0;
        queue<TreeNode*>q;
        q.push(root);
        int level = 0;
        while(!q.empty())
        {
            //  level = 0;

            int size = q.size();
            while(size--){
                TreeNode* curr = q.front();
                q.pop();

                if(curr->left != NULL){
                    q.push(curr->left);
                }
                if(curr->right != NULL){
                    q.push(curr->right);
                }

            }
            level++;
        }
        return level;
    }
};
